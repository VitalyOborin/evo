[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "zynero-evolution"
version = "0.1.0"
description = "AI Agent Evolution Platform"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Zynero Team", email = "team@zynero.com"},
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # FastAPI и сервер
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "python-multipart>=0.0.6",

    # Pydantic для моделей данных
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "email-validator>=2.0.0",

    # Конфигурация
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",

    # Логирование
    "structlog>=23.0.0",

    # HTTP клиент для тестирования
    "requests>=2.31.0",
    "httpx>=0.27.0",
    "aiohttp>=3.8.0",
    "yandexcloud>=0.120.0",

    # Шаблоны и AI
    "Jinja2>=3.1.0",
    "openai>=1.0.0",
    "openai-agents>=0.3.3",

    # Аутентификация и безопасность
    "python-jose[cryptography]",
    "passlib[bcrypt]",
    "authlib>=1.3.0",
    "google-auth>=2.24.0",
    "cryptography>=43.0.0",

    # Базы данных
    "asyncpg",
    "sqlalchemy[asyncio]",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",

    # Инструменты
    "dependency-injector",
    "tenacity>=8.2.0",
    "jmespath>=1.0.0",
    "rich>=13.10.0",
    "tiktoken>=0.12.0",
    "openapi_resolver>=0.0.6",

    # Кэширование
    "aiocache>=0.12.0",

    # Интеграции
    "python-gitlab>=0.21.0",

    # Поиск и векторы
    "opensearch-py>=2.10.0",
    "qdrant-client>=1.10.0",

    # HTTP прокси
    "httpx-socks>=0.7.0",

    # Математика
    "numpy>=1.26.4,<2.0.0",
    "pybit>=0.1.0",
]

[project.optional-dependencies]
dev = [
    # Тестирование
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-order>=1.0.0",
    "aiosqlite>=0.19.0",
]

[tool.setuptools]
packages = ["ai_agents", "config", "tools"]

[tool.setuptools.package-dir]
"" = "."

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--tb=short",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ai_agents", "config", "tools"]
skip = ["__init__.py"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ai_agents.*",
    "config.*",
    "tools.*",
]
disallow_untyped_defs = false

[tool.coverage.run]
source = ["ai_agents", "config", "tools"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
